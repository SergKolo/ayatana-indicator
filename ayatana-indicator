#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#
# Author: Serg Kolo , contact: 1047481448@qq.com
# Date: September 27 , 2016
# Purpose: appindicator for displaying mounted filesystem usage
# Tested on: Ubuntu 16.04 LTS
#
#
# Licensed under The MIT License (MIT).
# See included LICENSE file or the notice below.
#
# Copyright Â© 2016 Sergiy Kolodyazhnyy
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
import gi
gi.require_version('AppIndicator3', '0.1')
#gi.require_version('Notify', '0.7')
from gi.repository import GLib as glib
from gi.repository import AppIndicator3 as appindicator
from gi.repository import Gtk as gtk
from gi.repository import Gio
#from gi.repository import Notify
from gi.repository import Gdk
from collections import OrderedDict
import time
import urllib.parse
import subprocess
import dbus
#import json
import os

class AyatanaIndicator(object):

    def __init__(self):
        self.app = appindicator.Indicator.new(
            'ayatana-indicator', "preferences-system-windows",
            appindicator.IndicatorCategory.HARDWARE
        )
        self.bus = "session"
        self.service = "org.ayatana.bamf"
        self.paths = [ "/org/ayatana/bamf/matcher",
                       "/org/ayatana/bamf/control"
        ]

        self.cached_stack = self.get_window_stack()
        self.cached_titles = [self.get_window_title(i[0]) 
                              for i in self.cached_stack
        ]
        self.theme = gtk.IconTheme.get_default()
        self.app.set_status(appindicator.IndicatorStatus.ACTIVE)
        self.make_menu()
        self.update()

    def add_menu_item(self, menu_obj, item_type, image, label, action, args):
        """ dynamic function that can add menu items depending on
            the item type and other arguments"""
        menu_item, icon = None, None
        if item_type is gtk.ImageMenuItem and label:
            menu_item = gtk.ImageMenuItem.new_with_label(label)
            menu_item.set_always_show_image(True)
            if '/' in image:
                icon = gtk.Image.new_from_file(image)
            else:
                icon = gtk.Image.new_from_icon_name(image, 16)
            menu_item.set_image(icon)
        elif item_type is gtk.ImageMenuItem and not label:
            menu_item = gtk.ImageMenuItem()
            menu_item.set_always_show_image(True)
            if '/' in image:
                icon = gtk.Image.new_from_file(image)
            else:
                icon = gtk.Image.new_from_icon_name(image, 16)
            menu_item.set_image(icon)
        elif item_type is gtk.MenuItem:
            menu_item = gtk.MenuItem(label)
        elif item_type is gtk.SeparatorMenuItem:
            menu_item = gtk.SeparatorMenuItem()
        if action:
            menu_item.connect('activate', action, *args)

        menu_obj.append(menu_item)
        menu_item.show()

    

    def add_submenu(self,top_menu,label,icon):
        
        if icon:
            menuitem = gtk.ImageMenuItem() 
            menuitem.set_always_show_image(True)
            if '/' in icon:
                image = gtk.Image.new_from_file(icon)
            else:
                image = gtk.Image.new_from_icon_name(icon,16)
            menuitem.set_image(image)
            menuitem.set_label(label)
        else:
            menuitem = gtk.MenuItem(label)
        submenu = gtk.Menu()
        menuitem.set_submenu(submenu)
        top_menu.append(menuitem)
        menuitem.show()
        return submenu
    
    def make_menu(self):
        if hasattr(self, 'app_menu'):
            for item in self.app_menu.get_children():
                #if item.get_label() != 'quit':
                    self.app_menu.remove(item)
        else:
            self.app_menu = gtk.Menu()

        running_list = self.get_running_apps()
        active = str(self.get_active_app())
        app_counter = 0
        window_counter = 0
        for app_path in running_list:
            name = self.get_app_name(app_path)
            if 'Compiz' == name: continue
            app_counter = app_counter + 1
            if str(app_path) == active:
                name = '<' + name + '>'
            desktop_file = self.get_desktop_file(app_path)
            icon = self.get_app_icon(desktop_file)
            xids = self.get_app_xids(app_path)
            num_windows = str(len(xids))
            name = name + "\n" + num_windows + " windows open"
            app_submenu = self.add_submenu(self.app_menu,name,icon) 
            for xid in xids:
                geometry = self.get_dimensions(xid)
                window_counter = window_counter + 1
                pid = self.get_window_pid(xid)
                viewport = self.get_viewport_for_xid(xid)
                title = self.get_window_title(xid)[:20]
                title = title + ' '*(20 - len(title))
                monitor = self.get_monitor(xid)
                status = 'False'
                if self.is_active(xid):
                   status = 'True'

                label_items = [title + '\n',
                               'XID:\t' + str(xid) ,
                               'PID:\t' + str(pid),
                               'Viewport:\t' + str(viewport) ,
                               'Monitor:\t' + str(monitor),
                               'Geometry:\t' + str(geometry),
                               'Active:\t' + status
                ]
                label = "\n".join(label_items)

                item = [app_submenu,gtk.MenuItem,
                        None,label,
                        self.raise_xid,[xid]
                ]
                self.add_menu_item(*item)
                item = [app_submenu,gtk.SeparatorMenuItem,
                        None,None,
                        None,[None]
                ]
                self.add_menu_item(*item)

        item = [self.app_menu,gtk.SeparatorMenuItem,
                None,None,
                None,[None]
        ]
        self.add_menu_item(*item)


        stats_submenu = self.add_submenu(self.app_menu,"statistics",None) 

        current_vp = self.get_current_viewport()
        all_vps = self.enumerate_viewports()
        current_vp_num = all_vps[current_vp]
        num_workspaces = len(all_vps)
        label = 'Windows:' + str(window_counter) \
                + '\tApps:' + str(app_counter) + '\nViewports:' + str(num_workspaces) \
                + '\tCurrent Viewport:' + str(current_vp_num) + ","\
                + str(current_vp) + '\nMonitor Count:' + str(self.get_monitor_count())
        self.add_menu_item(stats_submenu,gtk.MenuItem,None,label,None,[None])
        last = None
        for child in stats_submenu.get_children(): last = child
        last.set_sensitive(False)
        #last.set_can_focus(False)

        self.add_menu_item(self.app_menu,gtk.ImageMenuItem,'about','about',self.show_about_dlg,[None])
        self.add_menu_item(self.app_menu,gtk.ImageMenuItem,'exit','quit',self.quit,[None])
        self.app.set_menu(self.app_menu)

    def update(self,*args):
       
        current_stack = self.get_window_stack()
        current_titles = [self.get_window_title(i[0]) 
                          for i in current_stack
        ]

        if (current_stack != self.cached_stack or
            current_titles != self.cached_titles):
            self.make_menu()
            self.cached_stack = current_stack
            self.cached_titles = current_titles

        glib.timeout_add_seconds(3,self.callback)

    def get_dimensions(self,xid):
        dimensions = None
        wininfo = self.run_cmd(['xwininfo','-id',str(xid)])
        if wininfo:
            lines = wininfo.decode().strip().split('\n')
        for line in lines:
            l = line.lstrip()
            if l.startswith('Width:'):
               dimensions = l.split(':')[1] + 'x'
            if l.startswith('Height:'):
               dimensions = dimensions + l.split(':')[1]
        return dimensions
               
      
    def callback(self,*args):
        self.update()

    def get_monitor_count(self,*args):
        sc = Gdk.Screen.get_default()
        return sc.get_n_monitors()

    def gsettings_get(self,schema,path,key):
        """Get value of gsettings schema"""
        if path is None:
            gsettings = Gio.Settings.new(schema)
        else:
            gsettings = Gio.Settings.new_with_path(schema,path)
        return gsettings.get_value(key)

    def get_viewport_tuple(self,num):
        for key,val in self.enumerate_viewports().items():
              if num == val: return key
    
    def enumerate_viewports(self,*args):
        """ generates enumerated dictionary of viewports and their
            indexes, counting left to right """
        schema="org.compiz.core"
        path="/org/compiz/profiles/unity/plugins/core/"
        keys=['hsize','vsize']
        screen = Gdk.Screen.get_default()
        screen_size=[screen.get_width(),screen.get_height()]
        grid=[int(str(self.gsettings_get(schema,path,key))) for key in keys]
        x_vals=[screen_size[0]*x for x in range(0,grid[0])]
        y_vals=[screen_size[1]*x for x in range(0,grid[1])]
        
        viewports=[(x,y)  for y in y_vals for x in x_vals ]
        viewports_dict = OrderedDict()
        for ix,vp in enumerate(viewports,1):
            viewports_dict[vp] = ix
        return viewports_dict
    
    def get_current_viewport(self,*args):
        """returns tuple representing current viewport, 
           in format (width,height)"""
        vp_string = self.run_cmd(['xprop', '-root', 
                             '-notype', '_NET_DESKTOP_VIEWPORT'])
        vp_list=vp_string.decode().strip().split('=')[1].split(',')
        return tuple( int(i)  for i in vp_list )

    def enumerate_relative_viewports(self,*args):
       """ computes Unity viewport positions relative
           to current viewport
       """
       new_vp_dict = OrderedDict()
       current_viewport = self.get_current_viewport()
       for vp,num in self.enumerate_viewports().items():
           relative_pos = (vp[0] - current_viewport[0],
                           vp[1] - current_viewport[1])
           new_vp_dict[relative_pos] = num
       return new_vp_dict

    def get_viewport_for_xid(self,xid):
        sc = Gdk.Screen.get_default()
        win_obj = None
        for w in sc.get_window_stack():
            if w.get_xid() == xid:
               win_obj = w
               break
        position = (win_obj.get_origin().x,
                    win_obj.get_origin().y)
        viewports = self.enumerate_viewports()
        if self.get_current_viewport() != (0,0):
            viewports = self.enumerate_relative_viewports()
        last = None
        for vp in viewports.keys():
            if (position[0]>= vp[0] and 
                position[1]>= vp[1]):
                last = viewports[vp]
        return last

    def get_window_stack(self,*args):
        call = [ 'session',
                 'com.canonical.Unity.WindowStack', 
                 '/com/canonical/Unity/WindowStack', 
                 'com.canonical.Unity.WindowStack',
                 'GetWindowStack',
                 None
        ]
        stack = self.get_dbus(*call)
        clean_stack = []
        for index,item in enumerate(stack):
                if 'compiz' in item[1]:
                    continue
                clean_stack.append(item)
        return clean_stack 

    def raise_xid(self,*args):
        window_vp_num = self.get_viewport_for_xid(args[-1])
        window_vp = self.get_viewport_tuple(window_vp_num)
        current_vp = self.get_current_viewport()
        if current_vp != window_vp:
            vp_str = ",".join([str(i) for i in window_vp])
            self.run_cmd(['wmctrl','-o',vp_str])
        sc = Gdk.Screen.get_default()
        for window in sc.get_window_stack():
            if window.get_xid() == args[-1]:
               window.focus(time.time())
               window.process_all_updates()
               self.make_menu()

    def get_window_title(self,*args):
        full_path = '/org/ayatana/bamf/window/'  + str(args[-1])
        call = [self.bus,self.service,
                full_path,'org.ayatana.bamf.view',
                'Name',None
        ]
        return self.get_dbus(*call)

    def get_window_pid(self,*args):
        full_path = '/org/ayatana/bamf/window/'  + str(args[-1])
        call = [self.bus,self.service,
                full_path,'org.ayatana.bamf.window',
                'GetPid',None
        ]
        return self.get_dbus(*call)


    def is_active(self,*args):
        full_path = '/org/ayatana/bamf/window/'  + str(args[-1])
        call = [self.bus,self.service,
                full_path, 'org.ayatana.bamf.view',
                'IsActive',None
        ]
        return self.get_dbus(*call)

    def get_monitor(self,*args):
        full_path = '/org/ayatana/bamf/window/'  + str(args[-1])
        call = [self.bus,self.service,
                full_path, 'org.ayatana.bamf.window',
                'Monitor',None
        ]
        return str(self.get_dbus(*call))

    def get_app_icon(self,*args):
        try:
            app_info = Gio.DesktopAppInfo.new_from_filename(args[-1])
            icon = app_info.get_icon()
            if type(icon) == Gio.ThemedIcon:
                themed_name = icon.get_names()[0]
                theme = gtk.IconTheme.get_default()
                name = theme.lookup_icon(themed_name, 48, 0).get_filename()
                
            if type(icon) == Gio.FileIcon:
                name = icon.get_file().get_uri()
        except:
            return None
        else:
            urllib_decoded = urllib.parse.unquote(name).replace('file://','')
            #print(urllib_decoded)
            return urllib_decoded

    def get_desktop_file(self,*args):
         dbus_call = [ self.bus,self.service,args[-1],
                       'org.ayatana.bamf.application','DesktopFile',
                       None
         ]
         return self.get_dbus(*dbus_call)

    def get_active_app(self,*args):
        dbus_call = [self.bus,self.service, self.paths[0],
                     "org.ayatana.bamf.matcher","ActiveApplication",None]
        return self.get_dbus(*dbus_call)

    def get_app_xids(self,*args):
        dbus_call = [self.bus, self.service, args[-1],
                     "org.ayatana.bamf.application","Xids",None]
        return self.get_dbus(*dbus_call)

    def get_app_name(self,*args):
        dbus_call = [self.bus, self.service, args[-1],
                     "org.ayatana.bamf.view","Name",None]
        return self.get_dbus(*dbus_call)

    def get_running_apps(self,*args):
        dbus_call = [self.bus, self.service,self.paths[0],
                     "org.ayatana.bamf.matcher","RunningApplications",None]
        return self.get_dbus(*dbus_call)

# General purpose functions 

    def get_dbus(self, bus_type, obj, path, interface, method, arg):
        """ utility: executes dbus method on specific interface"""
        if bus_type == "session":
            bus = dbus.SessionBus()
        if bus_type == "system":
            bus = dbus.SystemBus()
        proxy = bus.get_object(obj, path)
        method = proxy.get_dbus_method(method, interface)
        try:
            if arg:
                return method(arg)
            else:
                return method()
        except dbus.exceptions.DBusException:
            return None

    def get_dbus_property(self, bus_type, obj, path, iface, prop):
        """ utility:reads properties defined on specific dbus interface"""
        if bus_type == "session":
            bus = dbus.SessionBus()
        if bus_type == "system":
            bus = dbus.SystemBus()
        proxy = bus.get_object(obj, path)
        aux = 'org.freedesktop.DBus.Properties'
        props_iface = dbus.Interface(proxy, aux)
        props = props_iface.Get(iface, prop)
        return props

    def show_about_dlg(self,*args):
        dlg = gtk.AboutDialog()
        dlg.set_program_name('Ayatana Indicator')
        #dlg.set_version()
        dlg.set_logo(None)
        #dlg.set_logo_icon_name('preferences-system-windows')
        dlg.set_authors(['Sergiy Kolodyazhnyy <1047481448@qq.com>'])
        #dlg.set_wrap_license(True)
        dlg.set_copyright('Copyright (c) 2011-2016 Sergiy Kolodyazhnyy')
        dlg.set_title("")
        dlg.run()
        dlg.destroy()

    def quit(self,*args):
        gtk.main_quit()

    def run_cmd(self, cmdlist):
        """ utility: reusable function for running external commands """
        new_env = dict(os.environ)
        new_env['LC_ALL'] = 'C'
        try:
            stdout = subprocess.check_output(cmdlist, env=new_env)
        except subprocess.CalledProcessError:
            pass
        else:
            if stdout:
                return stdout

    def run(self):
        """ Launches the indicator """
        try:
            gtk.main()
        except KeyboardInterrupt:
            pass

    def quit(self, *args):
        """ closes indicator """
        gtk.main_quit()


def main():
    """ defines program entry point """
    indicator = AyatanaIndicator()
    indicator.run()

if __name__ == '__main__':
  try:
    main()
  except  KeyboardInterrupt:
    gtk.main_quit()
